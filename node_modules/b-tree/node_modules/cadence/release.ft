# Arrays As You Go and Construction

In this release, I've updated the array creation to build arrays for arrayed results as you go. There is one slight API change, but it is not going to effect any of the existing Cadence code that I know of.

Our constructed function now has no name as an anonymous function should, it preserves arity, and `toString` shows the function body that was given to us by the dear user.

## Build Arrays As Needed

Now arrays are built in parallel as needed. Arity for an arrayed callback when the arity is set by adding arrays to an array of parallel arrays based on the count of arguments given to the the callback for a particular index. If no callbacks are created &mdash; if the parallel array has zero entries &mdash; then the arity defaults to 1.

If the callbacks generated for each array index are invoked with different numbers of arguments, the default arity the greater number of arguments. Cells in the parallel array that have no argument are left undefined. Generally, you should avoid building an array from variadic responses, and variadic responses are rare in the Node.js modules I've seen so far. That is, I haven't seen such a monster yet.

It was the case that a parallel loop would omit entries from the gathered results if the callback was invoked with no arguments. This is inconsistent. If the default arity is three and the callback for a particular index receives only two arguments, the third argument is undefined. However, if that same callback were to receive no arguments, that result would be omitted.

At some point I must have been using parallel arrays to weed through a list, wanting to filter as much as loop, and thought this was a clever trick. What did is save me though? Internally the filter was implemented as a call to `Array.filter`. Today I'd use a serial loop and continue to skip to filter. This would prevent the index from ever being created.

I'm generally avoiding looped parallelism. Preferring to have parallelism implemented at a higher level. Rather than reading a directory of files in parallel, read them one at a time, but know that the HTTP service in which this logic is embedded is reading another directory for another client somewhere else.

### Anonymous Functions Have No Name

The function created by Cadence is now nameless as an anonymous function should be. It was named `execute`. That's a leak.

Arity is now preserved at an enormous cost in size, over one hundred bytes added. Plus, the use use of `Function` when the arity greater than four. I expect that someone is going to want to have a talk with me about the use of `Function`. I'm cool with it, but people are told that they are not capable of using it correctly, so they assume that their limitations are universal.

Not you, dear user. The others.

Tried to override the `length` property of a function. Not surprised that it is impossible, even using `__defineGetter__`. I was able to override `toString`, however.

Thus, I added a `toString` to the generated function that displays the result of calling `toString` on the body given to us by the dear user.

Cadence now builds an anonymous function with the properties of the anonymous error-first callback you'd define directly.

### Using Continue Label Internally

Loops are implemented by adding an additional step to the start and end of the cadence that defines the loop. The leading step prepares the arguments for the user's steps. The trailing step used to manipulate the `nextIndex` property of the top frame. It now  returns the continue label using the same mechanism as that given to the dear user.

# Issue by Issue

 * Rename `redux_.js` to `_redux.js`. #304.
 * Remove converage for module loading bandages. #303.
 * Remove pointless `results.length` reset. #298.
 * Result `results.length` instead of `count`. #297.
 * Create next `Step` with correct `vargs`. #296.
 * Rename `consumer` to `done`. #270.
 * Rename `step` function to `async`. #263.
 * Upgrade Proof to 0.0.50. #265.
 * Preserve toString. #257.
 * Generated function must have no name. #255.
 * Create arrayed responses as you go. #248.
 * Use continue label internally. #253.
